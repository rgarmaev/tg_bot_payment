from __future__ import annotations

from dataclasses import dataclass
from typing import Optional
import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from .config import settings
from yookassa import Payment
from yookassa.domain.exceptions import UnauthorizedError
from uuid import uuid4
from .models import User, Order, OrderStatus, Subscription
from .x3ui.client import X3UIClient


router = Router()


@dataclass
class AppDeps:
    session: AsyncSession


PLANS = [
    {"code": "m1", "title": "–ú–µ—Å—è—Ü", "days": 30, "price": 200},
    {"code": "m3", "title": "3 –ú–µ—Å—è—Ü–∞", "days": 90, "price": 500},
    {"code": "m6", "title": "6 –ú–µ—Å—è—Ü–µ–≤", "days": 180, "price": 800},
    {"code": "y1", "title": "1 –≥–æ–¥", "days": 365, "price": 1500},
]


def get_plan_by_code(code: str) -> Optional[dict]:
    for p in PLANS:
        if p["code"] == code:
            return p
    return None


async def ensure_user(session: AsyncSession, tg_user_id: int) -> User:
    result = await session.execute(select(User).where(User.tg_user_id == tg_user_id))
    user = result.scalar_one_or_none()
    if user:
        return user
    from sqlalchemy.dialects.sqlite import insert as sqlite_insert
    # Insert or ignore to avoid UNIQUE violation on races
    await session.execute(
        sqlite_insert(User).prefix_with("OR IGNORE").values(tg_user_id=tg_user_id)
    )
    result = await session.execute(select(User).where(User.tg_user_id == tg_user_id))
    return result.scalar_one()


@router.message(Command("start"))
async def cmd_start(message: types.Message, session: AsyncSession):
    async with session.begin():
        await ensure_user(session, message.from_user.id)

    kb = InlineKeyboardBuilder()
    kb.button(text="üì¶ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="menu:plans")
    kb.button(text="üìÑ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="menu:subs")
    kb.button(text="üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="menu:apps")
    kb.adjust(1)

    # Build tariffs/discounts lines
    base_month_price = next((p["price"] for p in PLANS if p["code"] == "m1"), 200)
    lines = []
    for p in PLANS:
        days = p["days"]
        months = 12 if days >= 360 else max(1, round(days / 30))
        full_price = base_month_price * months
        discount = max(0, int(round((1 - (p["price"] / full_price)) * 100)))
        lines.append(f"- {p['title']}: {p['price']}‚ÇΩ (—Å–∫–∏–¥–∫–∞ {discount}% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ {months} –º–µ—Å)")

    text = (
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MY VPN Server!\n"
        "–î–æ—Å—Ç—É–ø –≤ —Å–µ—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
        "–¢–∞—Ä–∏—Ñ—ã –∏ —Å–∫–∏–¥–∫–∏:\n" + "\n".join(lines) + "\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –¥–æ—Å—Ç—É–ø –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /buy ‚Ä¢ /check ‚Ä¢ /my"
    )
    await message.answer(text, reply_markup=kb.as_markup())


@router.message(Command("buy"))
async def cmd_buy(message: types.Message, session: AsyncSession):
    async with session.begin():
        await ensure_user(session, message.from_user.id)

    kb = InlineKeyboardBuilder()
    for p in PLANS:
        kb.button(text=f"{p['title']} ‚Äî {p['price']}‚ÇΩ", callback_data=f"plan:{p['code']}")
    kb.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("menu:plans"))
async def cb_open_plans(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for p in PLANS:
        kb.button(text=f"{p['title']} ‚Äî {p['price']}‚ÇΩ", callback_data=f"plan:{p['code']}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:home")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data == "menu:home")
async def cb_home(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì¶ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="menu:plans")
    kb.button(text="üìÑ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="menu:subs")
    kb.button(text="üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="menu:apps")
    kb.adjust(1)

    base_month_price = next((p["price"] for p in PLANS if p["code"] == "m1"), 200)
    lines = []
    for p in PLANS:
        days = p["days"]
        months = 12 if days >= 360 else max(1, round(days / 30))
        full_price = base_month_price * months
        discount = max(0, int(round((1 - (p["price"] / full_price)) * 100)))
        lines.append(f"- {p['title']}: {p['price']}‚ÇΩ (—Å–∫–∏–¥–∫–∞ {discount}% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ {months} –º–µ—Å)")

    text = (
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MY VPN Server!\n"
        "–î–æ—Å—Ç—É–ø –≤ —Å–µ—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
        "–¢–∞—Ä–∏—Ñ—ã –∏ —Å–∫–∏–¥–∫–∏:\n" + "\n".join(lines) + "\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –¥–æ—Å—Ç—É–ø –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /buy ‚Ä¢ /check ‚Ä¢ /my"
    )
    await callback.message.edit_text(text, reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data == "menu:apps")
async def cb_open_apps(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="iOS (App Store)", url="https://apps.apple.com/app/id6476628951")
    kb.button(text="Android (Google Play)", url="https://play.google.com/store/apps/details?id=com.v2raytun.android&pcampaignid=web_share")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:home")
    kb.adjust(1)
    await callback.message.edit_text("–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("menu:subs"))
async def cb_open_subs(callback: types.CallbackQuery, session: AsyncSession):
    result = await session.execute(
        select(Subscription)
        .join(User)
        .where(User.tg_user_id == callback.from_user.id)
        .order_by(Subscription.id.desc())
    )
    subs = result.scalars().all()
    if not subs:
        await callback.message.edit_text("–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
    else:
        lines = ["–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"]
        for s in subs:
            line = f"#{s.id} UUID={s.xray_uuid} active={s.is_active}"
            if s.config_url:
                line += f"\n{s.config_url}"
            lines.append(line)
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:home")
        kb.adjust(1)
        await callback.message.edit_text("\n".join(lines), reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("plan:"))
async def cb_plan_choose(callback: types.CallbackQuery, session: AsyncSession):
    code = callback.data.split(":", 1)[1]
    plan = get_plan_by_code(code)
    if not plan:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Ensure user and create order within a transaction
    async with session.begin():
        user = await ensure_user(session, callback.from_user.id)

        order = Order(
            user_id=user.id,
            amount=plan["price"],
            currency="RUB",
            status=OrderStatus.PENDING,
            external_id=plan["code"],
        )
        session.add(order)
        await session.flush()

        order_id = order.id
        amount = float(order.amount)

    pay_url = None
    if settings.payment_provider == "yookassa":
        from .config import settings as app_settings
        from yookassa import Configuration
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–¥–∞–Ω—ã
        if not (app_settings.yk_shop_id and app_settings.yk_api_key):
            await callback.answer(
                "–ü–ª–∞—Ç—ë–∂ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã YK_SHOP_ID/YK_API_KEY.",
                show_alert=True,
            )
            return
        Configuration.account_id = app_settings.yk_shop_id
        Configuration.secret_key = app_settings.yk_api_key
        description = f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {plan['title']} (–∑–∞–∫–∞–∑ #{order_id})"
        success_url = (
            app_settings.public_base_url.rstrip("/") + "/payments/yookassa/success"
        ) if app_settings.public_base_url else None
        try:
            idempotence_key = f"order-{order_id}-{uuid4()}"
            payment = Payment.create({
                "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                "confirmation": {
                    "type": "redirect",
                    **({"return_url": success_url} if success_url else {}),
                },
                "capture": True,
                "description": description,
                "metadata": {"order_id": str(order_id)},
            }, idempotence_key)
            pay_url = getattr(getattr(payment, "confirmation", None), "confirmation_url", None)
        except UnauthorizedError as e:
            logging.exception("YooKassa Unauthorized while creating payment for order %s", order_id)
            await callback.answer(
                "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —à–ª—é–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YK_SHOP_ID/YK_API_KEY –≤ .env.",
                show_alert=True,
            )
            return
        except Exception:
            logging.exception("Failed to create YooKassa payment for order %s", order_id)
            await callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True,
            )
            return
    else:
        # fallback (should not be used once Robokassa fully removed)
        pay_url = None

    if not pay_url:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="menu:plans")
    kb.adjust(1)
    await callback.message.edit_text(
        f"–°—á—ë—Ç #{order_id} –Ω–∞ {amount:.2f}‚ÇΩ —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
        reply_markup=kb.as_markup(),
    )
    await callback.answer()


@router.message(Command("check"))
async def cmd_check(message: types.Message, session: AsyncSession):
    result = await session.execute(
        select(Order)
        .join(User)
        .where(User.tg_user_id == message.from_user.id)
        .order_by(Order.id.desc())
    )
    order = result.scalars().first()
    if not order:
        await message.answer("–°—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
        return
    if order.status != OrderStatus.PAID:
        await message.answer(
            f"–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ #{order.id}: {order.status}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
        )
        return

    # determine plan days from order code if available
    plan_days = settings.plan_days
    if order.external_id:
        p = get_plan_by_code(order.external_id)
        if p:
            plan_days = p["days"]

    async with X3UIClient(
        settings.x3ui_base_url,
        settings.x3ui_username,
        settings.x3ui_password,
    ) as x3:
        created = await x3.add_client(
            inbound_id=settings.x3ui_inbound_id,
            days=plan_days,
            traffic_gb=settings.x3ui_client_traffic_gb,
            email_note=f"tg_{message.from_user.id}",
        )

    result_user = await session.execute(
        select(User).where(User.tg_user_id == message.from_user.id)
    )
    user = result_user.scalar_one()
    sub = Subscription(
        user_id=user.id,
        inbound_id=settings.x3ui_inbound_id,
        xray_uuid=created.uuid,
        expires_at=None,
        config_url=created.config_url,
        is_active=True,
    )
    session.add(sub)
    await session.commit()

    text = (
        "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.\n"
        f"UUID: {created.uuid}\n"
    )
    if created.config_url:
        text += f"–°—Å—ã–ª–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {created.config_url}"
    else:
        text += "–ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–∞–Ω–µ–ª–∏."
    await message.answer(text)


@router.message(Command("my"))
async def cmd_my(message: types.Message, session: AsyncSession):
    result = await session.execute(
        select(Subscription)
        .join(User)
        .where(User.tg_user_id == message.from_user.id)
        .order_by(Subscription.id.desc())
    )
    subs = result.scalars().all()
    if not subs:
        await message.answer("–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
        return
    lines = ["–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"]
    for s in subs:
        line = f"#{s.id} UUID={s.xray_uuid} active={s.is_active}"
        if s.config_url:
            line += f"\n{s.config_url}"
        lines.append(line)
    await message.answer("\n".join(lines))